{"ast":null,"code":"var _jsxFileName = \"/Users/macbookair/Desktop/Reactpractice/mytodolist/src/Task.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Task = _ref => {\n  let {\n    id,\n    taskName,\n    completed,\n    completeTask,\n    deleteHandle,\n    incompleteTask,\n    handleEditTask,\n    handleCancelEdit,\n    handleSaveTask,\n    setNewTask\n  } = _ref;\n  if (handleSaveTask) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: taskName,\n        onChange: e => setNewTask(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSaveTask,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCancelEdit,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textDecoration: completed ? \"line-through\" : \"\"\n        },\n        children: taskName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => completeTask(id),\n        children: \"Complete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => incompleteTask(id),\n        children: \"Incomplete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => deleteHandle(id),\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleEditTask({\n          id,\n          taskName\n        }),\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this);\n  }\n};\n_c = Task;\nvar _c;\n$RefreshReg$(_c, \"Task\");","map":{"version":3,"names":["React","Task","id","taskName","completed","completeTask","deleteHandle","incompleteTask","handleEditTask","handleCancelEdit","handleSaveTask","setNewTask","e","target","value","textDecoration"],"sources":["/Users/macbookair/Desktop/Reactpractice/mytodolist/src/Task.js"],"sourcesContent":["import React from 'react';\n\nexport const Task = ({\n  id,\n  taskName,\n  completed,\n  completeTask,\n  deleteHandle,\n  incompleteTask,\n  handleEditTask,\n  handleCancelEdit,\n  handleSaveTask,\n  setNewTask,\n}) => {\n  if (handleSaveTask) {\n    return (\n      <div>\n        <input type=\"text\" value={taskName} onChange={(e) => setNewTask(e.target.value)}/>\n        <button onClick={handleSaveTask}>Save</button>\n        <button onClick={handleCancelEdit}>Cancel</button>\n      </div>\n    );\n  } else {\n    return (\n      <div>\n        <div style={{ textDecoration: completed ? \"line-through\" : \"\" }}>\n          {taskName}\n        </div>\n        <button onClick={() => completeTask(id)}>Complete</button>\n        <button onClick={() => incompleteTask(id)}>Incomplete</button>\n        <button onClick={() => deleteHandle(id)}>Delete</button>\n        <button onClick={() => handleEditTask({ id, taskName })}>Edit</button>\n      </div>\n    );\n  }\n};\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC;AAE1B,OAAO,MAAMC,IAAI,GAAG,QAWd;EAAA,IAXe;IACnBC,EAAE;IACFC,QAAQ;IACRC,SAAS;IACTC,YAAY;IACZC,YAAY;IACZC,cAAc;IACdC,cAAc;IACdC,gBAAgB;IAChBC,cAAc;IACdC;EACF,CAAC;EACC,IAAID,cAAc,EAAE;IAClB,oBACE;MAAA,wBACE;QAAO,IAAI,EAAC,MAAM;QAAC,KAAK,EAAEP,QAAS;QAAC,QAAQ,EAAGS,CAAC,IAAKD,UAAU,CAACC,CAAC,CAACC,MAAM,CAACC,KAAK;MAAE;QAAA;QAAA;QAAA;MAAA,QAAE,eAClF;QAAQ,OAAO,EAAEJ,cAAe;QAAA,UAAC;MAAI;QAAA;QAAA;QAAA;MAAA,QAAS,eAC9C;QAAQ,OAAO,EAAED,gBAAiB;QAAA,UAAC;MAAM;QAAA;QAAA;QAAA;MAAA,QAAS;IAAA;MAAA;MAAA;MAAA;IAAA,QAC9C;EAEV,CAAC,MAAM;IACL,oBACE;MAAA,wBACE;QAAK,KAAK,EAAE;UAAEM,cAAc,EAAEX,SAAS,GAAG,cAAc,GAAG;QAAG,CAAE;QAAA,UAC7DD;MAAQ;QAAA;QAAA;QAAA;MAAA,QACL,eACN;QAAQ,OAAO,EAAE,MAAME,YAAY,CAACH,EAAE,CAAE;QAAA,UAAC;MAAQ;QAAA;QAAA;QAAA;MAAA,QAAS,eAC1D;QAAQ,OAAO,EAAE,MAAMK,cAAc,CAACL,EAAE,CAAE;QAAA,UAAC;MAAU;QAAA;QAAA;QAAA;MAAA,QAAS,eAC9D;QAAQ,OAAO,EAAE,MAAMI,YAAY,CAACJ,EAAE,CAAE;QAAA,UAAC;MAAM;QAAA;QAAA;QAAA;MAAA,QAAS,eACxD;QAAQ,OAAO,EAAE,MAAMM,cAAc,CAAC;UAAEN,EAAE;UAAEC;QAAS,CAAC,CAAE;QAAA,UAAC;MAAI;QAAA;QAAA;QAAA;MAAA,QAAS;IAAA;MAAA;MAAA;MAAA;IAAA,QAClE;EAEV;AACF,CAAC;AAAC,KAjCWF,IAAI;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}